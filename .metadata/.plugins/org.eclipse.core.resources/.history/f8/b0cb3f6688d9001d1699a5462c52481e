#include "menu.hpp"
#include <stdlib.h>
#include <time.h>

sf::RectangleShape criaRetangulo(int x, int y, int width, int height) {
	sf::RectangleShape rectangle(sf::Vector2f(width, height));

	rectangle.setFillColor(sf::Color { 12, 20, 58, 255 });
	rectangle.setOutlineColor(sf::Color::Black);
	rectangle.setOutlineThickness(1.0f);
	rectangle.setPosition(x, y);

	return rectangle;
}

sf::RectangleShape DestroiRetangulo() {
	sf::RectangleShape rectangle(sf::Vector2f(0, 0));

	rectangle.setFillColor(sf::Color { 12, 20, 58, 255 });
	rectangle.setOutlineColor(sf::Color::Black);
	rectangle.setOutlineThickness(0.0f);
	rectangle.setPosition(0, 0);

	return rectangle;
}

void Menu::desenhaRetangulos() {

	sf::Color cor;

	for (int l = 0; l < 10; l++) {
		for (int c = 0; c < 10; c++) {

			if (boxes[l][c].getGlobalBounds().contains(mouse_coord)) {
				//loop para marcar um quadrado com um fire
				if (Mouse_Left == true) {

					linha = sf::Mouse::getPosition(Window).x / dim;
					coluna = sf::Mouse::getPosition(Window).y / dim;
					if (matriz[linha][coluna] == CARAVELA
							|| matriz[linha][coluna] == TERCO
							|| matriz[linha][coluna] == TERCO2
							|| matriz[linha][coluna] == BARCO
							|| matriz[linha][coluna] == FLUTY
							|| matriz[linha][coluna] == FLUTY2
							|| matriz[linha][coluna] == VELEIRO
							|| matriz[linha][coluna] == VELEIRO2
							|| matriz[linha][coluna] == VELEIRO3
							|| matriz[linha][coluna] == VELEIRO4) {

						if (matriz[linha][coluna] == CARAVELA) {
							CaravelaClicks--;
							if (CaravelaClicks == 0) {
								Caravelavisible = true;

							}

						}
						if (matriz[linha][coluna] == VELEIRO) {
							VeleiroUm--;
							if(VeleiroUm == 0){
								Veleirovisible = true;
							}
						}
						if (matriz[linha][coluna] == VELEIRO2) {
							VeleiroDois--;
							if(VeleiroDois == 0){
								Veleirovisible2 = true;
							}
						}
						if (matriz[linha][coluna] == VELEIRO3) {
							VeleiroTres--;
							if(VeleiroTres == 0){
								Veleirovisible3 = true;
							}
						}
						if (matriz[linha][coluna] == VELEIRO4) {
							VeleiroQuatro--;
							if(VeleiroQuatro == 0){
								Veleirovisible4 = true;
							}
						}
						if (matriz[linha][coluna] == TERCO) {
							TercoUm--;
							if(TercoUm == 0){
								Tercovisible = true;
							}
						}
						if (matriz[linha][coluna] == TERCO2) {
								TercoDois--;
								if(TercoDois == 0){
									Tercovisible2 = true;
								}
							}
						if (matriz[linha][coluna] == FLUTY) {
							FlutyUm--;
							if(FlutyUm == 0){
								Flutyvisible = true;
							}
						}
						if (matriz[linha][coluna] == FLUTY2) {
							FlutyDois--;
							if(FlutyDois == 0){
								Flutyvisible2 = true;
							}
						}
						if (matriz[linha][coluna] == BARCO) {
							TercoTres--;
							if(TercoTres == 0){
								barcovisible = true;
							}
						}
						matriz[linha][coluna] = FIRE;
						Bomb--;
						ContFire++;
					}

					if (matriz[linha][coluna] == AGUA) {
						matriz[linha][coluna] = Xarp;
						Bomb--;
						Cont++;

					}

					Mouse_Left = false;
				}
				boxes[l][c].setFillColor(sf::Color { 64, 15, 96, 255 });
			} else {
				boxes[l][c].setFillColor(sf::Color::Transparent);
			}

			Window.draw(boxes[l][c]);

		}

	}

}

void Menu::desenhaX() {
	float x, y;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == Xarp) {

				x = i * dim;
				y = j * dim;
				CoordX[Cont] = x;
				CoordY[Cont] = y;
				XSprite.setScale(0.1f, 0.1f);
				XSprite.setTexture(XImage);
				XSprite.setColor(sf::Color::White);
				agua.play();
				XSprite.setPosition(x, y);

			}

		}
	}
	Window.draw(XSprite);
	XSprite.setPosition(CoordX[Cont] + 10, CoordY[Cont] + 10);

	for (int i = 0; i <= Cont; i++) {
		Window.draw(XSprite);
		XSprite.setPosition(CoordX[i] + 10, CoordY[i] + 10);

	}

}

void Menu::desenhaFire() {
	float x, y;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == FIRE) {
				x = i * dim;
				y = j * dim;
				FireCoordX[ContFire] = x;
				FireCoordY[ContFire] = y;
				fogo.play();
				SpriteFire.setColor(sf::Color::White);
				SpriteFire.setPosition(x, y);
			}

		}
	}
	Window.draw(SpriteFire);
	SpriteFire.setPosition(FireCoordX[ContFire], FireCoordY[ContFire]);

	for (int i = 0; i < ContFire; i++) {
		Window.draw(SpriteFire);
		SpriteFire.setPosition(FireCoordX[i], FireCoordY[i]);

	}

}

void Menu::gerarBarcoV(int tamNavio) {
	srand(p);
	bool valido = false;
	int posx = rand() % 10;
	int posy = rand() % 10;
	if (tamNavio == 3) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  verticalL
				if (posy <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx + 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx][posy + tamNavio] != AGUA) {
							break;
						}
						if (matriz[posx][posy - 1] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
						// Marca as cÃ©lulas do barco na horizontal
						for (i = 0; i < tamNavio; i++) {
							matriz[posx][posy + i] = BARCO;

						}
						valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}
	}
}
void Menu::gerarFluty1(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;
	if (tamNavio == 4) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (posy <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx + 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx][posy + tamNavio] != AGUA) {
							break;
						}
						if (matriz[posx][posy - 1] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
						// Marca as cÃ©lulas do barco na horizontal
						for (i = 0; i < tamNavio; i++) {
							matriz[posx][posy + i] = FLUTY;
						}
						valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}
	}

}
void Menu::gerarFluty2(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;
	if (tamNavio == 4) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (posy <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx + 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx][posy + tamNavio] != AGUA) {
							break;
						}
						if (matriz[posx][posy - 1] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
						// Marca as cÃ©lulas do barco na horizontal
						for (i = 0; i < tamNavio; i++) {
							matriz[posx][posy + i] = FLUTY2;
						}
						valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}
	}

}
void Menu::gerarVeleiro1(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;

	if (tamNavio == 2) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (posy <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx + 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx][posy + tamNavio] != AGUA) {
							break;
						}
						if (matriz[posx][posy - 1] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
						// Marca as cÃ©lulas do barco na horizontal
						for (i = 0; i < tamNavio; i++) {
							matriz[posx][posy + i] = VELEIRO;
						}
						valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}
	}
}
void Menu::gerarVeleiro2(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;

	if (tamNavio == 2) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (posy <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx + 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx][posy + tamNavio] != AGUA) {
							break;
						}
						if (matriz[posx][posy - 1] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
						// Marca as cÃ©lulas do barco na horizontal
						for (i = 0; i < tamNavio; i++) {
							matriz[posx][posy + i] = VELEIRO2;
						}
						valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}
}
}
void Menu::gerarVeleiro3(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;

	if (tamNavio == 2) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (posy <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx + 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx][posy + tamNavio] != AGUA) {
							break;
						}
						if (matriz[posx][posy - 1] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
						// Marca as cÃ©lulas do barco na horizontal
						for (i = 0; i < tamNavio; i++) {
							matriz[posx][posy + i] = VELEIRO3;
						}
						valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}
}
}
void Menu::gerarVeleiro4(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;

	if (tamNavio == 2) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (posy <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx + 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy + i] != AGUA) {
							break;
						}
						if (matriz[posx][posy + tamNavio] != AGUA) {
							break;
						}
						if (matriz[posx][posy-1] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
						// Marca as cÃ©lulas do barco na horizontal
						for (i = 0; i < tamNavio; i++) {
							matriz[posx][posy + i] = VELEIRO4;
						}
						valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}
}
}


//GERA BARCOS HORIZONTAL//
void Menu::gerarTerco1(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;

	if (tamNavio == 3)
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (!valido && posx <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx + i][posy] != AGUA) {
							break;
						}
						if (matriz[posx + i][posy + 1] != AGUA) {
							break;
						}
						if (matriz[posx + i][posy - 1] != AGUA) {
							break;
						}
						if (matriz[posx + tamNavio][posy] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
							for (i = 0; i < tamNavio; i++) {
								matriz[posx + i][posy] = TERCO;

							}
							valido = true;
					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}


}
void Menu::gerarTerco2(int tamNavio) {
	srand(p);
	int posx, posy;
	bool valido = false;

	if (tamNavio == 3)
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;

			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (!valido && posx <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx + i][posy] != AGUA) {
							break;
						}
						if (matriz[posx + i][posy + 1] != AGUA) {
							break;
						}
						if (matriz[posx + i][posy - 1] != AGUA) {
							break;
						}
						if (matriz[posx + tamNavio][posy] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
							for (i = 0; i < tamNavio; i++) {
								matriz[posx + i][posy] = TERCO2;
								valido = true;

							}


					}
				}
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na horizontal

			}
		}


}
void Menu::gerarBarcoH(int tamNavio) {
	int posx, posy;
	srand(p);
	bool valido = false;

	if (tamNavio == 5) {
		while (!valido) {
			posx = rand() % 10;
			posy = rand() % 10;
			if (matriz[posx][posy] == AGUA) {
				// Verifica se hÃ¡ espaÃ§o suficiente para o navio na  vertical
				if (!valido && posx <= 10 - tamNavio) {
					int i;
					for (i = 0; i < tamNavio; i++) {
						if (matriz[posx + i][posy] != AGUA) {
							break;
						}
						if (matriz[posx + i][posy + 1] != AGUA) {
							break;
						}
						if (matriz[posx + i][posy - 1] != AGUA) {
							break;
						}
						if (matriz[posx + tamNavio][posy] != AGUA) {
							break;
						}
						if (matriz[posx - 1][posy] != AGUA) {
							break;
						}
					}
					if (i == tamNavio) {
							for (i = 0; i < tamNavio; i++) {
								matriz[posx + i][posy] = CARAVELA;
								valido = true;

							}
					}
				}
			}
		}
	}


}

void Menu::desenhaBarco() {

	float x, y;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == BARCO) {
				x = i * dim;
				y = j * dim;
				SpriteBarco03.setTexture(Barco03);
				SpriteBarco03.setScale(0.3, 0.26);
				SpriteBarco03.setPosition(x - 20, y - 130);

			}

		}
	}

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == FLUTY) {
				x = i * dim;
				y = j * dim;
				SpriteBarco04.setTexture(Barco04);
				SpriteBarco04.setScale(0.28, 0.4);
				flutyCoordY = y;
				flutyCoordX = x;
				SpriteBarco04.setPosition(flutyCoordX - 20, flutyCoordY- 220);
			}

		}
	}
	Window.draw(SpriteBarco04);

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == FLUTY2) {
				x = i * dim;
				y = j * dim;
				SpriteBarco09.setTexture(Barco04);
				SpriteBarco09.setScale(0.28, 0.4);
				flutyCoordY = y;
				flutyCoordX = x;
				SpriteBarco09.setPosition(flutyCoordX - 20, flutyCoordY - 220);
			}

		}
	}
	Window.draw(SpriteBarco09);



	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == VELEIRO) {
				x = i * dim;
				y = j * dim;
				VELEIROCoordX = x;
				VELEIROCoordY = y;
				SpriteBarco05.setTexture(Barco05);
				SpriteBarco05.setScale(0.2, 0.17);

				SpriteBarco05.setPosition(VELEIROCoordX, VELEIROCoordY - 60);

			}

		}
	}
	Window.draw(SpriteBarco05);
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == VELEIRO2) {
				x = i * dim;
				y = j * dim;
				VELEIROCoordX = x;
				VELEIROCoordY = y;
				SpriteBarco06.setTexture(Barco05);
				SpriteBarco06.setScale(0.2, 0.17);

				SpriteBarco06.setPosition(VELEIROCoordX, VELEIROCoordY - 60);

			}

		}
	}
	Window.draw(SpriteBarco06);
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == VELEIRO3) {
				x = i * dim;
				y = j * dim;
				VELEIROCoordX = x;
				VELEIROCoordY = y;
				SpriteBarco07.setTexture(Barco05);
				SpriteBarco07.setScale(0.2, 0.17);
				SpriteBarco07.setPosition(VELEIROCoordX, VELEIROCoordY - 60);

			}

		}
	}
	Window.draw(SpriteBarco07);
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == VELEIRO4) {
				x = i * dim;
				y = j * dim;
				VELEIROCoordX = x;
				VELEIROCoordY = y;
				SpriteBarco08.setTexture(Barco05);
				SpriteBarco08.setScale(0.2, 0.17);
				SpriteBarco08.setPosition(VELEIROCoordX, VELEIROCoordY - 60);

			}

		}
	}
	Window.draw(SpriteBarco08);

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == CARAVELA) {
				x = i * dim;
				y = j * dim;

				SpriteBarco01.setTexture(Barco01);
				SpriteBarco01.setScale(0.5, 0.3);

				SpriteBarco01.setPosition(x - 273, y - 20);

			}

		}
	}
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == TERCO) {
				x = i * dim;
				y = j * dim;
				TercoCoordY = y;
				TercoCoordX = x;
				SpriteBarco02.setTexture(Barco02);
				SpriteBarco02.setScale(0.26, 0.3);
				SpriteBarco02.setPosition(TercoCoordX - 130,TercoCoordY - 10);
			}

		}
	}
	Window.draw(SpriteBarco02);
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (matriz[i][j] == TERCO2) {
				x = i * dim;
				y = j * dim;
				TercoCoordY = y;
				TercoCoordX = x;
				SpriteBarco10.setTexture(Barco02);
				SpriteBarco10.setScale(0.26, 0.3);
				SpriteBarco10.setPosition(TercoCoordX - 130,TercoCoordY - 10);
			}

		}
	}
	Window.draw(SpriteBarco10);


}
void Menu::Points(){
	if (CaravelaClicks == 0) {
		Caravelapoints++;
		CaravelaClicks = -1;
	}

		if(VeleiroUm == 0){
			Veleiropoints++;
			VeleiroUm = - 1;
		}
		if(VeleiroDois == 0){
			Veleiropoints++;
			VeleiroDois = - 1;
		}
		if(VeleiroTres == 0){
			Veleiropoints++;
			VeleiroTres = - 1;
		}
		if(VeleiroQuatro == 0){
			Veleiropoints++;
			VeleiroQuatro = - 1;
		}
		if(FlutyUm == 0){
			Flutypoints++;
			FlutyUm = -1;
		}
		if(FlutyDois == 0){
			Flutypoints++;
			FlutyDois = -1;
		}

	if (TercoUm == 0) {
		Tercopoints++;
		TercoUm = -1;

	}
	if (TercoDois == 0) {
		Tercopoints++;
		TercoDois = -1;

	}
	if (TercoTres == 0) {
		Tercopoints++;
		TercoTres = -1;

	}

}
void Menu::Game() {
	Clear();
	Points();
	if (barcovisible == true) {
		SpriteBarco03.setColor(sf::Color::White);
	}
	if (Flutyvisible == true) {
		SpriteBarco04.setColor(sf::Color::White);
	}
	if (Flutyvisible2 == true) {
		SpriteBarco09.setColor(sf::Color::White);
	}
	if (Caravelavisible == true) {
		SpriteBarco01.setColor(sf::Color::White);
	}
	if (Tercovisible == true) {
		SpriteBarco02.setColor(sf::Color::White);
	}
	if (Tercovisible2 == true) {
		SpriteBarco10.setColor(sf::Color::White);
	}
	if (Veleirovisible == true) {
			SpriteBarco05.setColor(sf::Color::White);
		}
	if (Veleirovisible2 == true) {
		SpriteBarco06.setColor(sf::Color::White);
	}
	if (Veleirovisible3 == true) {
		SpriteBarco07.setColor(sf::Color::White);
	}
	if (Veleirovisible4 == true) {
		SpriteBarco08.setColor(sf::Color::White);
	}
	VolumeBg.setColor(sf::Color::Transparent);
	Barco01.loadFromFile("../Midia/barcos/iconbarco2.png");
	Barco02.loadFromFile("../Midia/barcos/barco6.png");
	Barco03.loadFromFile("../Midia/barcos/barco4.png");
	Barco04.loadFromFile("../Midia/barcos/barco5.png");
	Barco05.loadFromFile("../Midia/barcos/barco1.png");
	music->stop();
	c = 999;
	if (Infinitygame == true) {
		for (int i = 0; i < c; i++) {
			Bomb = c;

		}
	}

	Iconterco.setTexture(Barco01);
	Iconterco.setPosition(838, 313);
	Iconterco.setScale(0.1, 0.1);

	IconVeleiro.setTexture(Barco05);
	IconVeleiro.setPosition(878, 203);
	IconVeleiro.setScale(0.08, 0.08);

	XImage.loadFromFile("../Midia/x.png");
	Fire.loadFromFile("../Midia/barcos/fire.png");
	Fire.setSmooth(true);
	SpriteFire.setTextureRect(sf::IntRect(0, 0, 50, 50));
	SpriteFire.setTexture(Fire, true);
	float scala = (float) dim / Fire.getSize().x;
	SpriteFire.setScale(scala, scala);

	text1.setFont(*font);
	text1.setString("Player");
	text1.setPosition(980, 83);

	text2.setString("Player");
	text2.setFont(*font);
	text2.setFillColor(sf::Color::Cyan);
	text2.setPosition(977, 83);

	Number1.setFont(*Numberfont);
	Number1.setPosition(915, 210);
	Number1.setCharacterSize(25);
	Number1.setFillColor(sf::Color::Cyan);
	sprintf(Points1, "%d", Veleiropoints);
	Number1.setString(Points1);

	Number2.setFont(*Numberfont);
	Number2.setPosition(915, 310);
	Number2.setCharacterSize(25);
	Number2.setFillColor(sf::Color::Cyan);
	sprintf(Points2, "%d", Caravelapoints);
	Number2.setString(Points2);

	Number3.setFont(*Numberfont);
	Number3.setPosition(915, 410);
	Number3.setCharacterSize(25);
	Number3.setFillColor(sf::Color::Cyan);
	sprintf(Points3, "%d", Tercopoints);
	Number3.setString(Points3);

	Number4.setFont(*Numberfont);
	Number4.setPosition(915, 510);
	Number4.setCharacterSize(25);
	Number4.setFillColor(sf::Color::Cyan);
	sprintf(Points4, "%d", Flutypoints);
	Number4.setString(Points4);

	NumberBombs.setFont(*Numberfont);
	NumberBombs.setPosition(910, 150);
	NumberBombs.setCharacterSize(25);
	NumberBombs.setFillColor(sf::Color::Cyan);
	sprintf(Bombs, "%d", Bomb);
	NumberBombs.setString(Bombs);

	textTitulo.setFont(*font);
	textTitulo.setString("  Bombas disponiveis");
	textTitulo.setCharacterSize(13);
	textTitulo.setCharacterSize(17);
	textTitulo.setPosition(935, 150);
	textTitulo.setFillColor(sf::Color::Magenta);

	SubtextTitulo.setFont(*font);
	SubtextTitulo.setString("  Bombas disponiveis");
	SubtextTitulo.setCharacterSize(17);
	SubtextTitulo.setPosition(937, 150);
	SubtextTitulo.setFillColor(sf::Color::Cyan);

	//carrega background
	image.loadFromFile("../Midia/part3.png");

	//Grupo 1 de texto
	text3.setFont(*font);
	text3.setString(" Veleiros Atingidos");
	text3.setFillColor(sf::Color::Magenta);
	text3.setCharacterSize(17);
	text3.setPosition(937, 220);
	text10.setFont(*font);
	text10.setString(" Veleiros Atingidos");
	text10.setFillColor(sf::Color::Cyan);
	text10.setCharacterSize(17);
	text10.setPosition(939, 220);

	//Grupo 2 de texto
	text4.setFont(*font);
	text4.setString(" Caravelas Atingidas");
	text4.setFillColor(sf::Color::Magenta);
	text4.setCharacterSize(17);
	text4.setPosition(935, 320);
	text7.setFont(*font);
	text7.setString(" Caravelas Atingidas");
	text7.setFillColor(sf::Color::Cyan);
	text7.setCharacterSize(17);
	text7.setPosition(933, 320);

	//Grupo 3 de texto
	text5.setFont(*font);
	text5.setString(" tercos Atingidos");
	text5.setFillColor(sf::Color::Magenta);
	text5.setCharacterSize(17);
	text5.setPosition(937, 420);
	text8.setFont(*font);
	text8.setString(" tercos Atingidos");
	text8.setFillColor(sf::Color::Cyan);
	text8.setCharacterSize(17);
	text8.setPosition(939, 420);

	//Grupo 4 de texto
	text6.setFont(*font);
	text6.setString(" Fluyt Atingidos");
	text6.setCharacterSize(17);
	text6.setFillColor(sf::Color::Magenta);
	text6.setPosition(937, 520);
	text9.setFont(*font);
	text9.setString(" Fluyt Atingidos");
	text9.setFillColor(sf::Color::Cyan);
	text9.setCharacterSize(17);
	text9.setPosition(939, 520);

	//carregando barcos

	dim = 70;

	if(Veleiropoints == 4 && Caravelapoints == 1 && Tercopoints == 3 && Flutypoints == 2){
		VitoriaFinal = true;
		ChaveGame = false;
		ChaveFinalGame = true;
	}

	//Matriz para determinar se hÃ¡ algo na posiÃ§Ã£o.

	int l, c;

	if (Bomb == 0) {
		VitoriaFinal = false;
		Window.clear();
		ChaveFinalGame = true;
		ChaveGame = false;
	}

	//desenhando retangulos
	for (l = 0; l < 10; l++) {
		for (c = 0; c < 10; c++) {
			boxes[l][c] = criaRetangulo(l * dim, c * dim, dim, dim);
			matriz[l][c] = AGUA; //Tudo marcado como agua.

		}
	}

	///////////////////////////UPANDO BARCOS////////////////////////////////////////

	//gerando posiÃ§Ãµes aleatÃ³rias

	//1 barco de 5 quadrados
	gerarBarcoH(5);

	//2 barcos de 4 quadrados
	 //barco1.png
	gerarFluty1(4); //barco5.png
	gerarFluty2(4);
	//3 barcos de 3 quadrados
	gerarTerco1(3);
	gerarBarcoV(3);
	gerarTerco2(3);

	//4 barcos de 2 quadrados

	gerarVeleiro1(2);
	gerarVeleiro2(2);
	gerarVeleiro3(2);
	gerarVeleiro4(2);


} //end game

void Menu::ZerarGame() {
	CoordX[100] = { 0 };
	CoordY[100] = { 0 };
	Cont = -1;
	ContFire = -1;
	CaravelaClicks = 5;
	Caravelapoints = 0;
	VeleiroClikcs = 2;
	Veleiropoints = 0;
	FireCoordX[100] = { 0 };
	FireCoordY[100] = { 0 };
	TercoClikcs = 0;
	Tercopoints = 0;
	Flutypoints = 0;
	TercoCoordX =  0 ;
	TercoCoordY =  0 ;
	flutyCoordX =  0 ;
	flutyCoordY =  0 ;
	VELEIROCoordY=  0 ;
	VELEIROCoordX =  0 ;
	Caravelavisible = false;
	 Veleirovisible = false;
	 Veleirovisible2 = false;
	 Veleirovisible3 = false;
	 Veleirovisible4 = false;
	 Flutyvisible = false;
	 Flutyvisible2 = false;
	 VeleiroUm = 2;
	 VeleiroDois = 2;
	 VeleiroTres = 2;
	 VeleiroQuatro = 2;
	 Veleiro1 = true;
	 Veleiro2 = false;
	 Veleiro3 = false;
	 Veleiro4 = false;
	 Tercovisible = false;
	 Tercovisible2 = false;
	 barcovisible = false;
	 Infinitygame = false;
	 FlutyUm = 4;
	 FlutyDois = 4;
	 TercoUm = 3;
	 TercoDois = 3;
	 TercoTres = 3;

}
void Menu::Clear() {
	SpriteBarco01.setColor(sf::Color::Transparent);
	SpriteBarco02.setColor(sf::Color::Transparent);
	SpriteBarco03.setColor(sf::Color::Transparent);
	SpriteBarco04.setColor(sf::Color::Transparent);
	SpriteBarco05.setColor(sf::Color::Transparent);
	SpriteBarco06.setColor(sf::Color::Transparent);
	SpriteBarco07.setColor(sf::Color::Transparent);
	SpriteBarco08.setColor(sf::Color::Transparent);
	SpriteBarco09.setColor(sf::Color::Transparent);
	SpriteBarco10.setColor(sf::Color::Transparent);
}
//TELA FINAL
void Menu::FinalGame() {
	Clear();
	XSprite.setColor(sf::Color::Transparent);

	if (VolumeLigado == false) {
		VolumeBg.setColor(sf::Color::Transparent);
	}
	music->play();
	for (int l = 0; l < 10; l++) {
		for (int c = 0; c < 10; c++) {
			boxes[l][c] = DestroiRetangulo();
			matriz[l][c] = AGUA; //Tudo marcado como agua.

		}
	}
	SpriteFire.setColor(sf::Color::Transparent);
	Number1.setString("");
	Number2.setString("");
	Number3.setString("");
	Number4.setString("");
	NumberBombs.setString("");
	text3.setString("");
	text10.setString("");
	text4.setString("");
	text2.setString("");
	text1.setString("");
	text7.setString("");
	text2.setString("");

	image.loadFromFile("../Midia/part4.png");
	textTitulo.setFont(*font);
	if(VitoriaFinal == false){
		textTitulo.setString("Que");
		SubtextTitulo.setString("Pena");
	}
	if(VitoriaFinal == true){
		textTitulo.setString("Uauuuu um verdadeiro PIRATA");
		SubtextTitulo.setString("Incrivel");
	}

	textTitulo.setCharacterSize(79);
	textTitulo.setPosition(755, 150);
	textTitulo.setFillColor(sf::Color::Magenta);

	SubtextTitulo.setFont(*font);

	SubtextTitulo.setCharacterSize(79);
	SubtextTitulo.setPosition(757, 250);
	SubtextTitulo.setFillColor(sf::Color::Cyan);

	//Grupo 3 de texto
	text5.setFont(*font);
	text5.setString("Restart");
	text5.setFillColor(sf::Color::Magenta);
	text5.setCharacterSize(25);
	text5.setPosition(137, 630);
	text8.setFont(*font);
	text8.setString("Restart");
	text8.setFillColor(sf::Color::Cyan);
	text8.setCharacterSize(25);
	text8.setPosition(140, 630);

	//Grupo 4 de texto
	text6.setFont(*font);
	text6.setString("Quit");
	text6.setCharacterSize(25);
	text6.setFillColor(sf::Color::Magenta);
	text6.setPosition(1040, 630);
	text9.setFont(*font);
	text9.setString("Quit");
	text9.setFillColor(sf::Color::Cyan);
	text9.setCharacterSize(25);
	text9.setPosition(1037, 630);

	SelctMouse.setSize(sf::Vector2f(206, 52));
	SelctMouse.setPosition(140, 630);

	SelctMouse2.setSize(sf::Vector2f(206, 52));
	SelctMouse2.setPosition(1037, 630);

	if (SelctMouse.getGlobalBounds().contains(mouse_coord)) {
		text8.setFillColor(sf::Color::Magenta);
		text9.setFillColor(sf::Color::Cyan);

	}

	else if (!SelctMouse.getGlobalBounds().contains(mouse_coord)) {
		text8.setFillColor(sf::Color::Cyan);

	}

	if (SelctMouse2.getGlobalBounds().contains(mouse_coord)) {
		text9.setFillColor(sf::Color::Magenta);
		text8.setFillColor(sf::Color::Cyan);

	} else if (!SelctMouse2.getGlobalBounds().contains(mouse_coord)) {
		text9.setFillColor(sf::Color::Cyan);

	}

	if (Mouse_Left == true) {
		NumericKeyBoard = 0;
		if (SelctMouse.getGlobalBounds().contains(mouse_coord)) {
			ChaveLobby = true;
			ZerarGame();
			ChaveFinalGame = false;

		}

		if (SelctMouse2.getGlobalBounds().contains(mouse_coord)) {
			Window.close();
		}

		Mouse_Left = false;
	}
}
